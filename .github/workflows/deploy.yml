# Workflow name
name: Hwalibo Project CI/CD

# Conditions for workflow execution
on:
  push:
    branches: [ "main" ] # Runs on push events to the main branch

# Environment variables used in the workflow
env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/hwalibo-app # Docker Hub username/image name
  VERSION: ${{ github.sha }} # Use Git commit hash as the version

jobs:
  # 1. Build Job (CI)
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
          labels: org.opencontainers.image.revision=${{ github.sha }}

  # 2. Deploy Job (CD)
  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_PEM_KEY }}

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            # 1. Login to Docker Hub
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            
            # 2. Stop and remove existing containers (Use 'docker compose')
            docker compose down || true
            
            # 3. Pull the latest image
            docker pull ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }}
            
            # 4. Create .env file from GitHub Secrets
            echo "DB_URL=${{ secrets.DB_URL }}" > .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "JWT_ACCESS_VALIDITY=${{ secrets.JWT_ACCESS_VALIDITY }}" >> .env
            echo "JWT_REFRESH_VALIDITY=${{ secrets.JWT_REFRESH_VALIDITY }}" >> .env
            echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
            echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env

            # 5. Create docker-compose.yml file (The content here is correct)
            cat <<EOF > docker-compose.yml
            services:
              app:
                image: ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }}
                container_name: hwalibo-app
                ports:
                  - "8080:8080"
                depends_on:
                  db:
                    condition: service_healthy
                  redis:
                    condition: service_healthy
                environment:
                  - SPRING_DATASOURCE_URL=\${DB_URL}
                  - SPRING_DATASOURCE_USERNAME=\${DB_USERNAME}
                  - SPRING_DATASOURCE_PASSWORD=\${DB_PASSWORD}
                  - SPRING_DATA_REDIS_HOST=\${REDIS_HOST}
                  - SPRING_DATA_REDIS_PORT=\${REDIS_PORT}
                  - JWT_SECRET=\${JWT_SECRET}
                  - JWT_ACCESS_VALIDITY=\${JWT_ACCESS_VALIDITY}
                  - JWT_REFRESH_VALIDITY=\${JWT_REFRESH_VALIDITY}
                  - NAVER_CLIENT_ID=\${NAVER_CLIENT_ID}
                  - NAVER_CLIENT_SECRET=\${NAVER_CLIENT_SECRET}
                  - OPENAI_API_KEY=\${OPENAI_API_KEY}
                  - AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID}
                  - AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY}
                  - AWS_S3_BUCKET=\${AWS_S3_BUCKET}
              db:
                image: mysql:8.0.43
                container_name: hwalibo-db
                ports:
                  - "3306:3306"
                environment:
                  MYSQL_ROOT_PASSWORD: \${DB_PASSWORD}
                  MYSQL_DATABASE: toiletsystem
                  TZ: Asia/Seoul
                command: >
                  --default-authentication-plugin=caching_sha2_password
                  --character-set-server=utf8mb4
                  --collation-server=utf8mb4_0900_ai_ci
                healthcheck:
                  test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-p\${DB_PASSWORD}" ]
                  interval: 5s
                  timeout: 5s
                  retries: 60
                  start_period: 40s
                volumes:
                  - db-data:/var/lib/mysql
              redis:
                image: redis:7.2.5-alpine
                container_name: hwalibo-redis
                ports:
                  - "6379:6379"
                healthcheck:
                  test: ["CMD", "redis-cli", "ping"]
                  interval: 5s
                  timeout: 10s
                  retries: 10
                volumes:
                  - redis-data:/data
            volumes:
              db-data:
              redis-data:
            EOF
            
            # 6. Run containers with Docker Compose (Use 'docker compose')
            docker compose up -d
            
            # 7. Prune unused Docker images
            docker image prune -f